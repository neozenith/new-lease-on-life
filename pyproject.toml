[project]
name = "isochrones"
version = "0.1.0"
description = "Tools for geocoding addresses and calculating isochrones using GraphHopper API"
authors = [{name = "Your Name", email = "your.email@example.com"}]
maintainers = [{name = "Your Name", email = "your.email@example.com"}]
requires-python = ">=3.12"
readme = "README.md"
license = {text = "MIT"}
dependencies = [
    "duckdb",
    "duckdb-extensions",
    "duckdb-extension-spatial",
    "python-dotenv>=1.0.0",
    "playwright>=1.53.0",
    "superclaude>=3.0.0.1",
    "panel>=1.7.4",
    "pydeck>=0.9.1",
    "geopandas>=1.1.1",
    "pyarrow>=21.0.0",
    "requests>=2.32.4",
    "tqdm>=4.67.1",
    "ruamel-yaml>=0.18.15",
]



# Note: Dependencies are now primarily defined in each script using inline script metadata
# These are kept for reference and for traditional package installation
[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "ruff>=0.1.7",
]
geocode = [
    "requests>=2.31.0",
    "pyyaml>=6.0.1",
    "duckdb",
    "duckdb-extensions",
    "duckdb-extension-spatial",
    "python-dotenv>=1.0.0",
]
server = [
    "fastapi>=0.104.1",
    "uvicorn>=0.23.2",
    "python-multipart>=0.0.6",
    "duckdb",
    "duckdb-extensions",
    "duckdb-extension-spatial",
    "panel>=1.2.3",
    "param>=2.0.0",
    "pydeck>=0.8.0",
    "holoviews>=1.17.1",
    "bokeh>=3.2.2",
    "python-dotenv>=1.0.0",
]
query = [
    "duckdb",
    "duckdb-extensions",
    "duckdb-extension-spatial",
]
viewer = [
    "duckdb",
    "duckdb-extensions",
    "duckdb-extension-spatial",
    "panel>=1.3.8",
    "param>=2.0.1",
    "pydeck>=0.8.0",
    "python-dotenv>=1.0.0",
]
export-shapefiles = [
    "geopandas>=0.14.0",
    "shapely>=2.0.1",
    "fiona>=1.9.4",
    "pyogrio>=0.7.2",
    "tqdm>=4.66.1",
    "python-dotenv>=1.0.0",
]


[tool.rumdl]
line-length = 100
disable = ["MD013", "MD034","MD036"]
exclude = [
    # Common directories to exclude
    ".git",
    ".github",
    "node_modules",
    "vendor",
    "dist",
    "build",
]
respect-gitignore = true

[dependency-groups]
dev = [
    "playwright>=1.53.0",
    "pytest-playwright>=0.7.1",
    "pytest-xdist>=3.8.0",
]

# Rule-specific configurations (uncomment and modify as needed)

# [tool.rumdl.MD003]
# style = "atx"  # Heading style (atx, atx_closed, setext)

# [tool.rumdl.MD004]
# style = "asterisk"  # Unordered list style (asterisk, plus, dash, consistent)

# [tool.rumdl.MD007]
# indent = 2  # Unordered list indentation

# [tool.rumdl.MD013]
# line_length = 100  # Line length
# code_blocks = false  # Exclude code blocks from line length check
# tables = false  # Exclude tables from line length check
# headings = true  # Include headings in line length check

# [tool.rumdl.MD044]
# names = ["rumdl", "Markdown", "GitHub"]  # Proper names that should be capitalized correctly
# code_blocks_excluded = true  # Exclude code blocks from proper name check


[tool.black]
line-length = 120

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
    "E",# pycodestyle
    "F", # Pyflakes
    "UP", # pyupgrade
    "B", # flake8-bugbear
    "SIM", # flake8-simplify
    # "I", # isort # Let's let isort cook until ruff supports the import headings
    "PTH", # falek8-use-pathlib 
    "TCH", # flake8-type-checking
    # "S", # flake8-bandit
    "C90", #mccabe
]
ignore = ["E731", "E722"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.ruff.lint.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 5.
max-complexity = 10


[tool.isort]
profile = "black"
multi_line_output = 3
import_heading_stdlib = "Standard Library"
import_heading_firstparty = "Our Libraries"
import_heading_thirdparty = "Third Party"


[tool.coverage.run]
omit = ["tests/*", "**/__init__.py", "tasks.py"]
branch = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-s -vvv --color=yes --tb=short -n auto"
